global !p
def check_key(rx, dic, groupnum = 1, charnum = 6): # Check if the string match the rx expression; if match, check if the string is the key of the dic. Here suppose the length of the pattern is less than 4.
	string = vim.eval(r"strpart(getline('.'), 0, col('.') - 1)") # get the string from the head of the line to the position of the cursor
	length = len(string)
	if length >= charnum:
		string = string[-charnum:]
	match = re.search(rx + r'$', string)
	if match:
		return match.group(groupnum) in dic
	else:
		return 0

# texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
texMathZones = ['mkdMath']
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

dic_symbol_a = {
	# greek letter
	r'a' : r'\alpha',
	r'b' : r'\beta',
	r'g' : r'\gamma',
	r'd' : r'\delta',
	r'e' : r'\epsilon',
	r'z' : r'\zeta',
	r'w' : r'\eta',
	r'q' : r'\theta',
	r'i' : r'\iota',
	r'k' : r'\kappa',
	r'l' : r'\lambda',
	r'm' : r'\mu',
	r'n' : r'\nu',
	r'x' : r'\xi',
	r'p' : r'\pi',
	r'r' : r'\rho',
	r's' : r'\sigma',
	r't' : r'\tau',
	r'u' : r'\ulpsilon',
	r'f' : r'\phi',
	r'c' : r'\chi',
	r'y' : r'\psi',
	r'o' : r'\omega',
	r'vD' : r'\varDelta',
	r've' : r'\varepsilon',
	r'vf' : r'\varphi',
	r'vF' : r'\varPhi',
	r'vG' : r'\varGamma',
	r'vL' : r'\varLambda',
	r'vQ' : r'\varTheta',
	r'vS' : r'\varSigma',
	r'vP' : r'\varPhi',
	r'vO' : r'\varOmega',
	r'vX' : r'\varXi',
	r'vY' : r'\varPhi',
	r'vp' : r'\uppi',
	r'h' : r'\hbar',
	r'G' : r'\Gamma',
	r'D' : r'\Delta',
	r'E' : r'\Epsilon',
	r'Z' : r'\Zeta',
	r'W' : r'\Eta',
	r'Q' : r'\Theta',
	r'I' : r'\Iota',
	r'K' : r'\Kappa',
	r'L' : r'\Lambda',
	r'M' : r'\Mu',
	r'N' : r'\Nu',
	r'X' : r'\Xi',
	r'P' : r'\Pi',
	r'S' : r'\Sigma',
	r'T' : r'\Tau',
	r'U' : r'\Ulpsilon',
	r'F' : r'\Phi',
	r'Y' : r'\Psi',
	r'O' : r'\Omega',

	# common used symbol
	r'0' : r'\circ',
	r'8' : r'\infty',
	r'7' : r'\propto',
	r'6' : r'\partial',
	r'.' : r'\cdot',
	r'+' : r'\dag',
	r'*' : r'\bigstar',

	# arrow and equiv
	r'->' : r'\rightarrow',
	r'<-' : r'\leftarrow',
	r'=>' : r'\Rightarrow',
	r'<=' : r'\Leftarrow',
	r'<<' : r'\leftrightarrow',
	r'<>' : r'\Leftrightarrow',
	r'==' : r'\equiv',
}

# start with "@"
dic_symbol_b = {
	r'a' : r'\forall',
	r'b' : r'\because',
	r't' : r'\therefore',
	r'e' : r'\exists',
	r'p' : r'\partial',
	r'v' : r'\nabla',
	r'd' : r'\mathrm{d}',
	# r'R1' : r'\mathbb{R}',
	# r'R2' : r'\mathbb{R}^2',
	# r'R3' : r'\mathbb{R}^3',
	# r'Rn' : r'\mathbb{R}^n',

	# arrow and equiv
	r'->' : r'\longrightarrow',
	r'<-' : r'\longleftarrow',
	r'=>' : r'\implies',
	r'<=' : r'\impliedby',
	r'<<' : r'\longleftrightarrow',
	r'<>' : r'\iff',
	r'==' : r'\approx',

	# other symbols
	r'*' : r'\times',
	r'+' : r'\oplus',
	}


dic_frac = {
	r'p' : r'\partial',
	r'd' : r'\mathrm{d}',
}

dic_par_l = {
	r')' : r'\left(',
	r']' : r'\left[',
	r'}' : r'\left\{',
	r'>' : r'\langle',
	r'<|' : r'\left<',
	r'|>' : r'\left|',
}

dic_par_r = {
	r')' : r'\right)',
	r']' : r'\right]',
	r'}' : r'\right\}',
	r'>' : r'\rangle',
	r'<|' : r'\eight|',
	r'|>' : r'\right>',
}

dic_suffix = {
	r'HA' : r'\hat',
	r'VE' : r'\vec',
	r'DO' : r'\dot',
	r'DD' : r'\ddot', # 'S' means 'second'
	r'TI' : r'\tilde',
	r'BA' : r'\bar',
	r'LI' : r'\overline',
	r'RM' : r'\mathrm',
	r'SC' : r'\mathscr',
	r'SL' : r'\slashed',
	r'BF' : r'\boldsymbol',
	r'BB' : r'\mathbb',
	r'BM' : r'\mathbbm',
	r'CL' : r'\mathcal',
	# r'DD' : r'_',
	r'UU' : r'^'
}

dic_math_env = {
    r'a' : r'align',
    r'c' : r'cases',
    r'd' : r'dcases',
    r'e' : r'equation',
    r'g' : r'gather',
    r's' : r'split',
    r'ad' : r'aligned',
}

dic_matrix = {
	r'm' : r'matrix',
	r'b' : r'bmatrix',
	r'B' : r'Bmatrix',
	r'v' : r'vmatrix',
	r'V' : r'Vmatrix',
	r'p' : r'pmatrix',
}

dic_head_title = {
	r'1' : r'#',
	r'2' : r'##',
	r'3' : r'###',
	r'4' : r'####',
	r'5' : r'#####',
	r'6' : r'######',
}

dic_bold = {
	r'd' : r'Description',
	r'e' : r'Example',
	r'm' : r'More Details',
	r'mo' : r'MOTIVATION',
	r'n' : r'Notation',
	r'r' : r'Reference',
	r's' : r'Solving',
	r't' : r'Total',
}
dic_course = {
	r'a' : r'Astrophysics',
	r'aqm' : r'Advanced Quantum Mechanics',
	r'c' : r'Computational Physics',
	r'cl' : r'C Language',
	r'dg' : r'Differential Geometry',
	r'e' : r'English',
	r'el' : r'Electrodynamics',
	r'gr' : r'General Relativity',
	r'gt' : r'Group Theory',
	r'mmp' : r'Mathematical Method of Physics',
	r'ps' : r'Physical Simulation',
	r'qm' : r'Quantum Mechanics',
	r'qi' : r'Quantum Information',
	r'qft' : r'Quantum Field Theory',
	r's' : r'Statistic Physics',
	r'sa' : r'Sciencetific American',
	r'sp' : r'Solid Physics',
	r't' : r'Theoretical Mechanics',
	r'tm' : r'Thermal Mechanics',
	r'o' : r"Oxford Learner's Grammar",
	r'nno' : r'Nano-Optics',
	r'v' : r'Vim Config',
}

dic_word_property = {
	r'a' : r'adj.',
	r'av' : r'adv.',
	r'c' : r'conj.',
	r'v' : r'v.',
	r'vi' : r'vi.',
	r'vt' : r'vt.',
	r'n' : r'n.',
}
endglobal

# `: greek letter, common used symbol and command
# not add auto-space, since greek letter usuall engaged in auto-frac feature
priority 2
context "math() and check_key(r'`([a-zA-Z0-9.,;+\-*<>=|]{1,3})', dic_symbol_a)"
snippet "`([a-zA-Z0-9.,;+\-*<>=|]{1,3})" "" iAr
`!p snip.rv = dic_symbol_a[match.group(1)]`$0
endsnippet

# @
context "math() and check_key(r'@([a-zA-Z0-9.,;+\-*<>=]{1,3})', dic_symbol_b)"
snippet "@([a-zA-Z0-9.,;+\-*<>=]{1,3})" "math symbol II" iAr
`!p snip.rv = dic_symbol_b[match.group(1)]`
endsnippet

snippet "@f([a-zA-Z0-9])" "frac with default symbol" "check_key(r'@f([a-zA-Z0-9])', dic_frac)" iAre
\\dfrac{`!p snip.rv = dic_frac[match.group(1)]` $1}{`!p snip.rv = dic_frac[match.group(1)]` $2}$0
endsnippet

# math test
context "math()"
snippet ee "expnential" Aw
\\MaE^{ $0 }
endsnippet

context "math()"
snippet EE "expnential" Aw
\\MaE^{ $0 }
endsnippet

# h: head
snippet "h([0-9]{1,3})" "check_key(r'h([0-9]{1,3})', dic_head_title)" ire
`!p snip.rv = dic_head_title[match.group(1)]` $1
endsnippet

# a: angle
priority 1
snippet a "angle bracket" i
\\<$1\\>
endsnippet

# b: bold, blog
snippet b "bold" i
**$1**
endsnippet

priority 2
snippet "b([A-Za-z0-9]{1,3})" "check_key(r'b([A-Za-z0-9]{1,3})', dic_bold)" ire
**`!p snip.rv = dic_bold[match.group(1)]` :**$1
endsnippet

snippet "B([A-Za-z0-9]{1,3})" "check_key(r'B([A-Za-z0-9]{1,3})', dic_bold)" ire
**`!p snip.rv = dic_bold[match.group(1)]`**$1
endsnippet

# i: italic
context "not math()"
snippet i "italic" i
*$1*
endsnippet

# l: link
snippet l "link" i
[${1:text}](${2:link})
endsnippet

priority 1

# m: math
snippet m "inline maht" i
\$$1\$
endsnippet

priority 2
snippet mm "display math" i
\$\$
$1
\$\$
endsnippet

# ============================================================

# c: code, course
snippet c "inline code" i
\`$1\`
endsnippet

snippet C "display code" i
\`\`\`$1
$2
\`\`\`
endsnippet

priority 2
snippet "C([a-z]{1,3})" "check_key(r'C([a-z]{1,3})', dic_course)" ire
*`!p snip.rv = dic_course[match.group(1)]` :*
endsnippet

snippet "c([a-z]{1,3})" "check_key(r'c([a-z]{1,3})', dic_course)" ire
*`!p snip.rv = dic_course[match.group(1)]`*
endsnippet

priority 2
snippet "w([a-z]{1,3})" "check_key(r'w([a-z]{1,3})', dic_word_property)" ire
\\<`!p snip.rv = dic_word_property[match.group(1)]`\\>
endsnippet

snippet today "date of today" i
`date +%A,\ %B\ %d,\ %Y`
endsnippet

# d: delete
snippet d "delete line" i
~~$1~~
endsnippet

# ============================================================
# m: math

## standard env
snippet "\bm([a-zA-Z]{1,3})" "check_key(r'\bm([a-zA-Z]{1,3})', dic_math_env)" re
\begin{`!p snip.rv = dic_math_env[match.group(1)]`}
	$1
\end{`!p snip.rv = dic_math_env[match.group(1)]`}$0
endsnippet

## env with star
snippet "\bm([a-zA-Z]{1,3})\*" "check_key(r'\bm([a-zA-Z]{1,3})\*', dic_math_env)" reA
\begin{`!p snip.rv = dic_math_env[match.group(1)]`*}
	$1
\end{`!p snip.rv = dic_math_env[match.group(1)]`*}$0
endsnippet

# ============================================================

# f: figure, font matter
snippet f "describe" option
![${1:alt text}](${2:path} "$1")
endsnippet

snippet ft "figure/img with HTML tag" i
<img src="${1:figure paht}">
endsnippet

snippet fm "font matter"
---
title: '$1'
date: '`date "+%Y-%m-%d %H:%M"`'
index_img:
comment: true
math: true
categories:
- $2
tags:
- $3
---

> $4

<!--more-->

endsnippet

snippet fr "font matter for READ"
> This essay is a reading notes of *$1*, *^2* [^1]
endsnippet

# ============================================================
# M: matrix
# context "math()"
snippet "\bM([a-zA-Z]{1,3})" "check_key(r'\bM([a-zA-Z]{1,3})', dic_matrix)" re
\begin{`!p snip.rv = dic_matrix[match.group(1)]`}
	$1
\end{`!p snip.rv = dic_matrix[match.group(1)]`}$0
endsnippet

# ============================================================
# p: punctuation, power
snippet pn "name separator" option
Â·
endsnippet

# pp: power
priority 3
context "math() and check_key(r'pp([a-z])', dic_power)"
snippet "pp([a-z])" "power"  reiA
^{`!p snip.rv = dic_power[match.group(1)]`}
endsnippet

# ii: inverse power
context "math() and check_key(r'ii([a-z])', dic_power)"
snippet "ii([a-z])" "inverse power"  reiA
^{-`!p snip.rv = dic_power[match.group(1)]`}
endsnippet

# ============================================================

# s: space, segment line
snippet s "segment line (weak)"
-------------------------$1-------------------------
endsnippet

snippet S "segment line (strong)"
=========================$1=========================
endsnippet

priority 1
snippet sp "space" i
&nbsp;
endsnippet

priority 2
snippet sh "double space" i
&emsp;&emsp;
endsnippet

# t: template
snippet t "tag" i
{% $1 %}
endsnippet

snippet ts "schedule" i
### $1
#### Morning
- $2

#### Afternoon
- $3

#### Night
- $4
endsnippet

snippet tdt "diary (thought)" i
### Thought
#### $1
endsnippet

snippet tp "today photo" i
### $1
&emsp;&emsp;$2

![today photo, `date +%Y-%m-%d`](figure/`date +%Y-%m-%d`.${3:png})
endsnippet

snippet tP "today photo" i
### Today Photo
#### $1
&emsp;&emsp;$2

![today photo, `date +%Y-%m-%d`](figure/`date +%Y-%m-%d`.${3:png})
endsnippet

# n: notation
snippet nc "checkmark" i
\\checkmark
endsnippet

# u: underline
snippet u "underline" i
<u>$1</u>
endsnippet

# other
context "math()"
snippet ^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

context "math()"
priority 3
snippet // "displaystyle friction" iA
\\dfrac{$1}{$2}$0
endsnippet

priority 1
context "math()"
snippet <> "angle bracket" iA
\\braket{$1}
endsnippet

context "math()"
snippet <| "bra" iA
\\bra{$1}
endsnippet

context "math()"
snippet |> "ket" iA
\\ket{$1}
endsnippet

snippet "dd([a-zA-Z0-9])" "frac with default symbol" "check_key(r'dd([a-zA-Z0-9])', dic_frac)" iAre
\\dfrac{`!p snip.rv = dic_frac[match.group(1)]` $1}{`!p snip.rv = dic_frac[match.group(1)]` $2}$0
endsnippet

# parenthesis and long string
priority 2
snippet "`(\)|\]|\}|>|\|)" "check_key(r'`(\)|\]|\}|>|\|)', dic_par_r)" iAre
`!p snip.rv = dic_par_l[match.group(1)]` $1 `!p snip.rv = dic_par_r[match.group(1)]`$0
endsnippet

# RE
priority 1
context "math()"
snippet "([a-zA-Z\\])(\d)" "subscript" irA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}$0
endsnippet

context "math()"
snippet "([\\a-zA-Z0-9{}\[\]()+-_^]+)/" "auto friction with displaystyle" irA
\\dfrac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

## suffix (use capital both)
context "math() and check_key(r'([0-9a-zA-Z\*\\]+)([A-Z]{2})', dic_suffix, groupnum = 2, charnum = 15)"
snippet "([0-9a-zA-Z\*\\]+)([A-Z]{2})" "suffix" Ar
`!p snip.rv = dic_suffix[match.group(2)]`{`!p snip.rv = match.group(1)`}$0
endsnippet

# segline
snippet == "segline" w
==========
endsnippet
